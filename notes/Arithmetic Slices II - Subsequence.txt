#define il long long int
class Solution {
public:
 
    
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n = nums.size();
         vector<unordered_map<il ,int>> acc(n);
          int result=0;
        for(int i =1;i<n;i++){
              for(int j =0;j<i;j++){
                  il diff=(il) nums[i]-nums[j];
                  acc[i][diff]+=1+ acc[j][diff];
                  result+= 1+ acc[j][diff];
            
              }
            
        }
        return result-(n*(n-1)/2);
    }
};

1. Initialize a variable total_count to 0, which will keep track of the total number of arithmetic subsequences.
2. Initialize a 2D array dp with dimensions n x n, where n is the length of the input array nums. Each element dp[i][j] will represent the number of arithmetic subsequences ending at index i with a common difference of j.
3. Iterate through the array nums with two nested loops:
The outer loop (i) goes from 1 to n - 1.
The inner loop (j) goes from 0 to i - 1.
4. For each pair of indices (i, j), calculate the common difference diff = nums[i] - nums[j].
5. Update dp[i][diff] by incrementing it by 1, indicating that we have found a new arithmetic subsequence ending at index i with a common difference of diff.
6. If there is an existing subsequence ending at index j with the common difference diff, extend it to form a longer subsequence ending at index i. Increment dp[i][diff] by the value of dp[j][diff].
7. Update the total_count by adding the value of dp[j][diff] to it.
8. After the loops, the total_count will contain the total number of arithmetic subsequences.





