int mod=1e9+7;
class Solution {
public:
    int sumSubarrayMins(vector<int>& arr) {
      int n = arr.size();
        vector<int>right(n,0),left(n,0);
      stack<pair<int,int>>sLeft,sRight ;
        for(int i=0;i<n;i++){
            int count=1;
            while(!sLeft.empty()&&sLeft.top().first>arr[i]){°°°°°°°°°°
                count+=sLeft.top().second;
                sLeft.pop();
            }
            sLeft.push({arr[i],count});
            left[i]=count;
            
        }
        
        
              for(int i=n-1;i>=0;i--){
            int count=1;
            while(!sRight.empty()&&sRight.top().first>=arr[i]){ °°°°°°°° equal sign see the description below
                count+=sRight.top().second;
                sRight.pop();
            }
            sRight.push({arr[i],count});
            right[i]=count;
            
        }
        int result = 0;
        for(int i = 0;i<n;i++){
            result =(result+(arr[i]*(long long)(left[i]*right[i])%mod)%mod)%mod ;       
        }  
        return result;

    }
};


ok explainantion gonna take a while but just focus 

we have an       arr = [3,1,2,4]

Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.

so this solution is base on a trick which is how many time each element is repeating so 

3  1  2  4

let s take 1 for example

the left that 1 is the min  are 2 considered him self  1  and 3
the right that 1 is the min are 3 considered him self 1 2 4
the number of time that 1 is reapeating in the sum are left * right which is 6

so to count the left and the right we use stack
if we are searchin for the min or the max or the frequency or index or count or range we use the stack

here we go how it work 
    n is the size of the array
        vector<int>left(n,0);
      stack<pair<int,int>>sLeft ;
        for(int i=0;i<n;i++){
            int count=1;
            while(!sLeft.empty()&&sLeft.top().first>arr[i]){
                count+=sLeft.top().second;
                sLeft.pop();
            }
            sLeft.push({arr[i],count});
            left[i]=count;
            
        }
so it s ez just focus 

there is a trick here which is the edge case [2,2]
in this case we shouldnt add the count to the left and right it gonna be an extra count
so see the code above i put a mark where i need o change  °°°°°