class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        std::vector<int> nodeList_root1, nodeList_root2;
        getLeafValues(root1, nodeList_root1);
        getLeafValues(root2, nodeList_root2);
        return nodeList_root1 == nodeList_root2;
    }

    void getLeafValues(TreeNode* node, std::vector<int>& nodeList) {
        if (!node) {
            return;
        }

        if (!node->left && !node->right) {
            nodeList.push_back(node->val);
            return;
        }

        getLeafValues(node->left, nodeList);
        getLeafValues(node->right, nodeList);
    }

};


it s so simple if both the left and right are null add the value to the vector  optimize solution


class Solution {
public:
     void rangeSumBST(TreeNode* root,vector<int>&x) {
         if(root==nullptr) return;
        if(root->left==nullptr &&root->right==nullptr){
            x.push_back(root->val);
               
        } 
      rangeSumBST(root->left,x);
     rangeSumBST(root->right,x);

       
    }
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
          vector<int>ro1;
          vector<int>ro2;
     
       rangeSumBST(root1,ro1);
       rangeSumBST(root2,ro2);
        return ro1==ro2;
        
    }
};