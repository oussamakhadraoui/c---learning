//graph bfs breadth first search

const int N= 1e4;
bool vis[N];

class Solution {
  public:
  vector <int> bfs(int pos, vector<int> adj[]){
      vis[pos]=true;
      vector<int> result;
      queue<int> q;
      q.push(pos);
   
      while(!q.empty()){
         int fronter= q.front();
            result.push_back(fronter);
         q.pop();
         for(int i =0;i<adj[fronter].size();i++){
             int acc=adj[fronter][i];
             if(!vis[acc]){
                 vis[acc]=true;
                 q.push(acc);
             }
         }
          
          
      }
      return result;
  }
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
  
        memset(vis,0,sizeof(vis));
              
      
        
        
        
        return  bfs(0,adj);
    }
};





ok  a little explanation this method is the contraire of the dfs depth fisrt search 
this works en column so we use a queue we enter the childs after we pop the parent



