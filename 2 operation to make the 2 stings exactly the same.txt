apporch 1::

 bool closeStrings(std::string word1, std::string word2) {
        std::array<int, 26> charCount1 = {}; 
        std::array<int, 26> charCount2 = {}; 
        for (char c : word1) {
            ++charCount1[c - 'a'];
        }

        for (char c : word2) {
            ++charCount2[c - 'a'];
        }

        for (int i = 0; i < 26; ++i) {
            bool charPresentWord1 = charCount1[i] > 0;
            bool charPresentWord2 = charCount2[i] > 0;

            if ((charPresentWord1 && !charPresentWord2) || (!charPresentWord1 && charPresentWord2)) {
                return false;
            }
        }

        std::sort(charCount1.begin(), charCount1.end());
        std::sort(charCount2.begin(), charCount2.end());

        for (int i = 0; i < 26; ++i) {
            if (charCount1[i] != charCount2[i]) {
                return false;
            }
        }

        return true;
    }




my approach::

//     bool closeStrings(string word1, string word2) {
//         if(word1.size()!=word2.size()) return false;
//         vector<int>x(26,0);
//         vector<int>y(26,0);
//         vector<bool>x1(26, false),y1(26,false);
//         for(char c:word1){
//             x[c-'a']++;  x1[c-'a']=true;
//         }
//         for(char c :word2){
//             y[c-'a']++; y1[c-'a']=true;
//         }
        
//         sort(x.begin(),x.end());
//        sort(y.begin(),y.end());
//     return x==y&&x1==y1;
//     }

i guess it s well explained by the code the freq of char need to be exactly the same
and the char need to be exist so we can swipe it or switch it