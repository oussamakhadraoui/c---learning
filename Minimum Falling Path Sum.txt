Minimum Falling Path Sum

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n= matrix.size();
        vector<int>row(n);
        vector<int>prevRow(n);
        for(int i=0;i<n;++i)row[i]=matrix[0][i];
        for(int i=1;i<n;++i){
            prevRow=row;
            for(int j = 0;j<n;++j){
              int minVal=INT_MAX;  
                
                minVal=min(minVal,prevRow[j]);
                if(j-1>=0)minVal=min(minVal,prevRow[j-1]);
                if(j+1<n)minVal=min(minVal,prevRow[j+1]);
                
              row[j]=matrix[i][j]+minVal;  
            }
        }
        
        int result=INT_MAX;
        for(int i =0;i<n;++i){
            result=min(result,row[i]);
        }
        return result;
    }
};

ok the sceret here is conserve the row above always and delete the rest 
the other secret is always put the min of the 3 value so we can add them to the matrix above
so in the end we have an array with values we choose the min one