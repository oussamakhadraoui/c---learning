class RandomizedSet {
    set<int>s;
public:
    RandomizedSet() {}
    bool insert(int val) {
        if(s.find(val) != s.end()){
            return false;
        }
        s.insert(val);
        return true;
    }
    bool remove(int val) {
        if(s.find(val) == s.end()){
            return false;
        }
        s.erase(val);
        return true;
    }
    int getRandom() {
        // doing mod to get in range [0, s.size()-1]
        int pos = rand() % s.size();
        // std::next returns an iterator pointing to the element after being advanced by certain no. of positions.
        return *next(s.begin(), pos);
    }
};
//////////////////////////////////
my code


class RandomizedSet {
public:
    vector<int>nums;
    unordered_map<int ,int >index;
    
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
       if(index.find(val)!=index.end()) return false;
       nums.push_back(val);
        index[val]=nums.size()-1;
        return true;
           
      
    }
    
    bool remove(int val) {
            if(index.find(val)==index.end()) return false;
            int last = nums.back();
            
           index[last]=index[val];
            nums[index[last]]=last;  
        nums.pop_back();
            index.erase(val);
     
            return true;
    }
    
    int getRandom() {
    return nums[rand()%nums.size()];    
    }
};

create a index val map to track the index of each val to make the erase and the delete and add easier
 